package org.example.listener;

import org.example.event.PaymentConfirmedEvent;
import org.example.event.PaymentFailedEvent;
import org.example.event.PriceResponseEvent;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Component;

@Component
public class PriceResponseListener {

    private final KafkaTemplate<String, Object> kafkaTemplate;

    public PriceResponseListener(KafkaTemplate<String, Object> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    @KafkaListener(topics = "price-responses", groupId = "payment-group")
    public void handlePriceResponse(PriceResponseEvent event) {
        System.out.println("üíµ –û—Ç—Ä–∏–º–∞–Ω–æ —Ü—ñ–Ω—É: " + event);

        // üî¢ –°–∏–º—É–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å (–º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –¥–µ—Å—å)
        int quantity = 1; // —Ç–∏–º—á–∞—Å–æ–≤–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –∞–±–æ –ø—ñ–¥–∫–ª—é—á–∏–º–æ –¥–æ —Å—Ö–æ–≤–∏—â–∞

        double total = event.getPrice() * quantity;

        if (total <= 9000) {
            PaymentConfirmedEvent confirmed = new PaymentConfirmedEvent(event.getOrderId(), total);
            kafkaTemplate.send("payment-events", confirmed);
            System.out.println("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞: " + confirmed);
        } else {
            PaymentFailedEvent failed = new PaymentFailedEvent(event.getOrderId(), "üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è " + total);
            kafkaTemplate.send("payment-events", failed);
            System.out.println("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ—É—Å–ø—ñ—à–Ω–∞: " + failed);
        }
    }
}
