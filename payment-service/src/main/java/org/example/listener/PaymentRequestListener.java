package org.example.listener;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.example.event.PaymentRequestEvent;
import org.example.event.PaymentConfirmedEvent;
import org.example.event.PaymentFailedEvent;
import org.example.messaging.PaymentEventProducer;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

@Component
public class PaymentRequestListener {

    private final PaymentEventProducer producer;

    // –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
    private final Map<String, Double> balances = new HashMap<>();

    public PaymentRequestListener(PaymentEventProducer producer) {
        this.producer = producer;

        // –¥–æ–¥–∞–π —Ç–µ—Å—Ç–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
        balances.put("c1", 10000.0);
    }

    @KafkaListener(topics = "payment-requests", groupId = "payment-group")
    public void listen(ConsumerRecord<String, Object> record) {
        Object raw = record.value();

        if (raw instanceof PaymentRequestEvent event) {
            System.out.println("üì• Payment-service –æ—Ç—Ä–∏–º–∞–≤ –ø–æ–¥—ñ—é: " + event);

            double pricePerUnit = getPriceForProduct(event.getProductId());
            double total = event.getQuantity() * pricePerUnit;

            double customerBalance = balances.getOrDefault(event.getCustomerId(), 0.0);

            if (customerBalance >= total) {
                balances.put(event.getCustomerId(), customerBalance - total);

                producer.sendPaymentConfirmedEvent(new PaymentConfirmedEvent(
                        event.getOrderId(),
                        total
                ));

            } else {
                producer.sendPaymentFailedEvent(new PaymentFailedEvent(
                        event.getOrderId(),
                        "üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è " + total
                ));
            }
        } else {
            System.out.println("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó: " + raw.getClass().getName());
        }
    }

    private double getPriceForProduct(String productId) {
        return switch (productId) {
            case "p123" -> 9999.0;
            case "p456" -> 1999.0;
            case "p789" -> 9999.0;
            default -> 5000.0;
        };
    }
}
