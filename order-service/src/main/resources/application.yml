server:
  port: 8080

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/orders-db
    username: postgres
    password: postgres
  jpa:
    hibernate:
      ddl-auto: create  # можно заменить на validate, если позже добавим миграции
    show-sql: false
    properties:
      hibernate:
        format_sql: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: order-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

  task:
    scheduling:
      enabled: true

logging:
  level:
    root: INFO
    org.example: DEBUG
    io.opentelemetry: INFO

# Настройки OpenTelemetry
otel:
  exporter:
    otlp:
      endpoint: http://localhost:4317

# Настройки Actuator для предоставления метрик
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
  metrics:
    enable:
      all: true
  prometheus:
    metrics:
      export:
        enabled: true

app:
  kafka:
    bootstrap-servers: localhost:9092
  payment:
    timeout-minutes: 1  # How long to wait before considering a payment as stuck
    max-retries: 1      # How many times to retry payments before giving up